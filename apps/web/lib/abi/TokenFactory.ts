export const TokenFactoryABI = [
  {
    inputs: [
      { internalType: 'uint8', name: 'tierId', type: 'uint8' },
      {
        components: [
          { internalType: 'string', name: 'name', type: 'string' },
          { internalType: 'string', name: 'symbol', type: 'string' },
          { internalType: 'uint8', name: 'decimals', type: 'uint8' },
          { internalType: 'address', name: 'owner', type: 'address' },
          { internalType: 'uint8', name: 'tierId', type: 'uint8' },
          { internalType: 'uint64', name: 'templateVersion', type: 'uint64' },
        ],
        internalType: 'struct ERC20Template.TokenInit',
        name: 'init',
        type: 'tuple',
      },
      {
        components: [
          { internalType: 'uint256', name: 'initialSupply', type: 'uint256' },
          { internalType: 'uint256', name: 'cap', type: 'uint256' },
          { internalType: 'bool', name: 'mintable', type: 'bool' },
          { internalType: 'bool', name: 'burnable', type: 'bool' },
          { internalType: 'bool', name: 'pausable', type: 'bool' },
          { internalType: 'bool', name: 'governanceEnabled', type: 'bool' },
          { internalType: 'bool', name: 'autoLiquidityEnabled', type: 'bool' },
          { internalType: 'bool', name: 'antiWhaleEnabled', type: 'bool' },
          { internalType: 'bool', name: 'stakingEnabled', type: 'bool' },
          { internalType: 'uint16', name: 'autoLiquidityBps', type: 'uint16' },
          { internalType: 'address', name: 'autoLiquidityRouter', type: 'address' },
          { internalType: 'address', name: 'autoLiquidityPairToken', type: 'address' },
          { internalType: 'address', name: 'stakingManager', type: 'address' },
          { internalType: 'string', name: 'metadataURI', type: 'string' },
          { internalType: 'string', name: 'brandingURI', type: 'string' },
          {
            components: [
              { internalType: 'uint8', name: 'feeType', type: 'uint8' },
              { internalType: 'uint16', name: 'bps', type: 'uint16' },
              { internalType: 'address', name: 'recipient', type: 'address' },
            ],
            internalType: 'struct ERC20Template.FeeSplit[]',
            name: 'fees',
            type: 'tuple[]',
          },
          {
            components: [
              { internalType: 'address', name: 'account', type: 'address' },
              { internalType: 'uint256', name: 'amount', type: 'uint256' },
              { internalType: 'bool', name: 'vesting', type: 'bool' },
              { internalType: 'uint64', name: 'vestingStart', type: 'uint64' },
              { internalType: 'uint64', name: 'cliff', type: 'uint64' },
              { internalType: 'uint64', name: 'duration', type: 'uint64' },
              { internalType: 'bool', name: 'revocable', type: 'bool' },
            ],
            internalType: 'struct ERC20Template.InitRecipient[]',
            name: 'initialDistribution',
            type: 'tuple[]',
          },
          { internalType: 'address[]', name: 'minters', type: 'address[]' },
          { internalType: 'address[]', name: 'pausers', type: 'address[]' },
          { internalType: 'address[]', name: 'burners', type: 'address[]' },
          { internalType: 'address[]', name: 'bridgeOperators', type: 'address[]' },
          {
            components: [
              { internalType: 'bool', name: 'enabled', type: 'bool' },
              { internalType: 'uint256', name: 'maxTxAmount', type: 'uint256' },
              { internalType: 'uint256', name: 'maxWalletAmount', type: 'uint256' },
              { internalType: 'uint8', name: 'cooldownBlocks', type: 'uint8' },
            ],
            internalType: 'struct ERC20Template.AntiWhaleConfig',
            name: 'antiWhale',
            type: 'tuple',
          },
        ],
        internalType: 'struct ERC20Template.TokenConfig',
        name: 'cfg',
        type: 'tuple',
      },
    ],
    name: 'createToken',
    outputs: [{ internalType: 'address', name: 'token', type: 'address' }],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint8', name: '', type: 'uint8' }],
    name: 'tierInfo',
    outputs: [
      { internalType: 'uint256', name: 'price', type: 'uint256' },
      { internalType: 'uint256', name: 'features', type: 'uint256' },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalTokens',
    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
    name: 'allTokens',
    outputs: [{ internalType: 'address', name: '', type: 'address' }],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [{ internalType: 'address', name: '', type: 'address' }],
    name: 'tokenRecords',
    outputs: [
      {
        components: [
          { internalType: 'address', name: 'creator', type: 'address' },
          { internalType: 'uint8', name: 'tierId', type: 'uint8' },
          { internalType: 'uint64', name: 'createdAt', type: 'uint64' },
          { internalType: 'bytes32', name: 'configHash', type: 'bytes32' },
        ],
        internalType: 'struct TokenFactory.TokenRecord',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;
