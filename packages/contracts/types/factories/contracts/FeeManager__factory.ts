/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  FeeManager,
  FeeManagerInterface,
} from "../../contracts/FeeManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_treasury",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "buybackPortion",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "treasuryPortion",
        type: "uint256",
      },
    ],
    name: "FeesProcessed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "prev",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "next",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "process",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "treasury",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516104a73803806104a783398101604081905261002f9161009c565b6001600160a01b0381166100795760405162461bcd60e51b815260206004820152600d60248201526c54524541535552595f5a45524f60981b604482015260640160405180910390fd5b6001600160a01b0316608052600080546001600160a01b031916331790556100cc565b6000602082840312156100ae57600080fd5b81516001600160a01b03811681146100c557600080fd5b9392505050565b6080516103ba6100ed60003960008181606a015261011c01526103ba6000f3fe6080604052600436106100435760003560e01c806361d027b3146100585780638da5cb5b146100a8578063c33fb877146100c8578063f2fde38b146100d057600080fd5b3661005357610051346100f0565b005b600080fd5b34801561006457600080fd5b5061008c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b3480156100b457600080fd5b5060005461008c906001600160a01b031681565b61005161021c565b3480156100dc57600080fd5b506100516100eb36600461030b565b610227565b806000036100fb5750565b600061010860028361033b565b90506000610116828461035d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d8060008114610185576040519150601f19603f3d011682016040523d82523d6000602084013e61018a565b606091505b50509050806101d55760405162461bcd60e51b81526020600482015260126024820152711514915054d5549657d4d1539117d190525360721b60448201526064015b60405180910390fd5b60408051858152602081018590529081018390527ff3b92bac10eca6b22ab7eb9e11474efe0a46765ca7dd7700877f4f776997beb99060600160405180910390a150505050565b610225346100f0565b565b6000546001600160a01b0316331461026d5760405162461bcd60e51b81526020600482015260096024820152682727aa2fa7aba722a960b91b60448201526064016101cc565b6001600160a01b0381166102b05760405162461bcd60e51b815260206004820152600a6024820152694f574e45525f5a45524f60b01b60448201526064016101cc565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561031d57600080fd5b81356001600160a01b038116811461033457600080fd5b9392505050565b60008261035857634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561037e57634e487b7160e01b600052601160045260246000fd5b9291505056fea264697066735822122090f613457aedfca5b19517e54f74601c633fe060fd323ddbb3e73b40c671bd4164736f6c63430008180033";

type FeeManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FeeManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FeeManager__factory extends ContractFactory {
  constructor(...args: FeeManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _treasury: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_treasury, overrides || {});
  }
  override deploy(
    _treasury: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_treasury, overrides || {}) as Promise<
      FeeManager & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FeeManager__factory {
    return super.connect(runner) as FeeManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeeManagerInterface {
    return new Interface(_abi) as FeeManagerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): FeeManager {
    return new Contract(address, _abi, runner) as unknown as FeeManager;
  }
}
