/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  TokenLocker,
  TokenLockerInterface,
} from "../../contracts/TokenLocker";

const _abi = [
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "lockId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "unlockTime",
        type: "uint64",
      },
    ],
    name: "TokensLocked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "lockId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensWithdrawn",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "getLocksByOwner",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "unlockTime",
        type: "uint64",
      },
    ],
    name: "lock",
    outputs: [
      {
        internalType: "uint256",
        name: "lockId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lockCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "locks",
    outputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "unlockTime",
        type: "uint64",
      },
      {
        internalType: "bool",
        name: "withdrawn",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "lockId",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060016000556107f0806100256000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e1a7d4d1461005c5780635b1fc7f2146100715780639b10b6f514610097578063e15fec18146100a0578063f4dadc61146100c0575b600080fd5b61006f61006a3660046106b2565b61015a565b005b61008461007f3660046106e7565b6102e8565b6040519081526020015b60405180910390f35b61008460015481565b6100b36100ae366004610734565b610508565b60405161008e919061074f565b61011b6100ce3660046106b2565b600260208190526000918252604090912080546001820154928201546003909201546001600160a01b0391821693909116919067ffffffffffffffff81169060ff600160401b9091041685565b604080516001600160a01b0396871681529590941660208601529284019190915267ffffffffffffffff1660608301521515608082015260a00161008e565b610162610574565b600081815260026020526040902060018101546001600160a01b031633146101bd5760405162461bcd60e51b81526020600482015260096024820152682727aa2fa7aba722a960b91b60448201526064015b60405180910390fd5b6003810154600160401b900460ff161561020d5760405162461bcd60e51b815260206004820152601160248201527020a62922a0a22cafaba4aa24222920aba760791b60448201526064016101b4565b600381015467ffffffffffffffff1642101561025a5760405162461bcd60e51b815260206004820152600c60248201526b1393d517d5539313d0d2d15160a21b60448201526064016101b4565b60038101805468ff00000000000000001916600160401b17905560028101548154610292916001600160a01b0390911690339061059e565b8054600282015460405190815233916001600160a01b03169084907f5db071cb9ca9123fd9158edb7aec7785f1bf14cf64c85989310c146e0e98a7d99060200160405180910390a4506102e56001600055565b50565b60006102f2610574565b6001600160a01b0384166103355760405162461bcd60e51b815260206004820152600a602482015269544f4b454e5f5a45524f60b01b60448201526064016101b4565b600083116103735760405162461bcd60e51b815260206004820152600b60248201526a414d4f554e545f5a45524f60a81b60448201526064016101b4565b428267ffffffffffffffff16116103ba5760405162461bcd60e51b815260206004820152600b60248201526a15539313d0d2d7d41054d560aa1b60448201526064016101b4565b6001600081546103c990610793565b91829055506040805160a0810182526001600160a01b038088168083523360208085018281528587018b815267ffffffffffffffff808c1660608901908152600060808a018181528c825260028088528c83209b518c54908c166001600160a01b0319918216178d55965160018d8101805492909d169190981617909a559351988a0198909855516003988901805493511515600160401b0268ffffffffffffffffff199094169190921617919091179055828552948152948320805494850181558352939091209091018390559192506104a691903086610602565b6040805184815267ffffffffffffffff8416602082015233916001600160a01b0387169184917fa8e0aceb0e7793593174392561b00fa0920781b9ca2aafd6d4c7f29767e86f7d910160405180910390a46105016001600055565b9392505050565b6001600160a01b03811660009081526003602090815260409182902080548351818402810184019094528084526060939283018282801561056857602002820191906000526020600020905b815481526020019060010190808311610554575b50505050509050919050565b60026000540361059757604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b038381166024830152604482018390526105fd91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610641565b505050565b6040516001600160a01b03848116602483015283811660448301526064820183905261063b9186918216906323b872dd906084016105cb565b50505050565b600080602060008451602086016000885af180610664576040513d6000823e3d81fd5b50506000513d9150811561067c578060011415610689565b6001600160a01b0384163b155b1561063b57604051635274afe760e01b81526001600160a01b03851660048201526024016101b4565b6000602082840312156106c457600080fd5b5035919050565b80356001600160a01b03811681146106e257600080fd5b919050565b6000806000606084860312156106fc57600080fd5b610705846106cb565b925060208401359150604084013567ffffffffffffffff8116811461072957600080fd5b809150509250925092565b60006020828403121561074657600080fd5b610501826106cb565b6020808252825182820181905260009190848201906040850190845b818110156107875783518352928401929184019160010161076b565b50909695505050505050565b6000600182016107b357634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122006d6145fa9cc2101f40d8bb92fac6e0d9efa63537be50883eff9c794d5ebeef164736f6c63430008180033";

type TokenLockerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenLockerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenLocker__factory extends ContractFactory {
  constructor(...args: TokenLockerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TokenLocker & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TokenLocker__factory {
    return super.connect(runner) as TokenLocker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenLockerInterface {
    return new Interface(_abi) as TokenLockerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TokenLocker {
    return new Contract(address, _abi, runner) as unknown as TokenLocker;
  }
}
