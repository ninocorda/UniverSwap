/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IERC20Template,
  IERC20TemplateInterface,
} from "../../../contracts/interfaces/IERC20Template";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "decimals",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "tierId",
            type: "uint8",
          },
          {
            internalType: "uint64",
            name: "templateVersion",
            type: "uint64",
          },
        ],
        internalType: "struct IERC20Template.TokenInit",
        name: "init_",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "initialSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "cap",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "mintable",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "burnable",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "pausable",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "governanceEnabled",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "autoLiquidityEnabled",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "antiWhaleEnabled",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "stakingEnabled",
            type: "bool",
          },
          {
            internalType: "uint16",
            name: "autoLiquidityBps",
            type: "uint16",
          },
          {
            internalType: "address",
            name: "autoLiquidityRouter",
            type: "address",
          },
          {
            internalType: "address",
            name: "autoLiquidityPairToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "stakingManager",
            type: "address",
          },
          {
            internalType: "string",
            name: "metadataURI",
            type: "string",
          },
          {
            internalType: "string",
            name: "brandingURI",
            type: "string",
          },
          {
            components: [
              {
                internalType: "enum IERC20Template.FeeType",
                name: "feeType",
                type: "uint8",
              },
              {
                internalType: "uint16",
                name: "bps",
                type: "uint16",
              },
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
            ],
            internalType: "struct IERC20Template.FeeSplit[]",
            name: "fees",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "account",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "vesting",
                type: "bool",
              },
              {
                internalType: "uint64",
                name: "vestingStart",
                type: "uint64",
              },
              {
                internalType: "uint64",
                name: "cliff",
                type: "uint64",
              },
              {
                internalType: "uint64",
                name: "duration",
                type: "uint64",
              },
              {
                internalType: "bool",
                name: "revocable",
                type: "bool",
              },
            ],
            internalType: "struct IERC20Template.InitRecipient[]",
            name: "initialDistribution",
            type: "tuple[]",
          },
          {
            internalType: "address[]",
            name: "minters",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "pausers",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "burners",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "bridgeOperators",
            type: "address[]",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "enabled",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "maxTxAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxWalletAmount",
                type: "uint256",
              },
              {
                internalType: "uint8",
                name: "cooldownBlocks",
                type: "uint8",
              },
            ],
            internalType: "struct IERC20Template.AntiWhaleConfig",
            name: "antiWhale",
            type: "tuple",
          },
        ],
        internalType: "struct IERC20Template.TokenConfig",
        name: "cfg_",
        type: "tuple",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IERC20Template__factory {
  static readonly abi = _abi;
  static createInterface(): IERC20TemplateInterface {
    return new Interface(_abi) as IERC20TemplateInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IERC20Template {
    return new Contract(address, _abi, runner) as unknown as IERC20Template;
  }
}
