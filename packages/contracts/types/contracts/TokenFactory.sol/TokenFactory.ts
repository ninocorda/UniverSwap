/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ERC20Template {
  export type TokenInitStruct = {
    name: string;
    symbol: string;
    decimals: BigNumberish;
    owner: AddressLike;
    tierId: BigNumberish;
    templateVersion: BigNumberish;
  };

  export type TokenInitStructOutput = [
    name: string,
    symbol: string,
    decimals: bigint,
    owner: string,
    tierId: bigint,
    templateVersion: bigint
  ] & {
    name: string;
    symbol: string;
    decimals: bigint;
    owner: string;
    tierId: bigint;
    templateVersion: bigint;
  };

  export type FeeSplitStruct = {
    feeType: BigNumberish;
    bps: BigNumberish;
    recipient: AddressLike;
  };

  export type FeeSplitStructOutput = [
    feeType: bigint,
    bps: bigint,
    recipient: string
  ] & { feeType: bigint; bps: bigint; recipient: string };

  export type InitRecipientStruct = {
    account: AddressLike;
    amount: BigNumberish;
    vesting: boolean;
    vestingStart: BigNumberish;
    cliff: BigNumberish;
    duration: BigNumberish;
    revocable: boolean;
  };

  export type InitRecipientStructOutput = [
    account: string,
    amount: bigint,
    vesting: boolean,
    vestingStart: bigint,
    cliff: bigint,
    duration: bigint,
    revocable: boolean
  ] & {
    account: string;
    amount: bigint;
    vesting: boolean;
    vestingStart: bigint;
    cliff: bigint;
    duration: bigint;
    revocable: boolean;
  };

  export type AntiWhaleConfigStruct = {
    enabled: boolean;
    maxTxAmount: BigNumberish;
    maxWalletAmount: BigNumberish;
    cooldownBlocks: BigNumberish;
  };

  export type AntiWhaleConfigStructOutput = [
    enabled: boolean,
    maxTxAmount: bigint,
    maxWalletAmount: bigint,
    cooldownBlocks: bigint
  ] & {
    enabled: boolean;
    maxTxAmount: bigint;
    maxWalletAmount: bigint;
    cooldownBlocks: bigint;
  };

  export type TokenConfigStruct = {
    initialSupply: BigNumberish;
    cap: BigNumberish;
    mintable: boolean;
    burnable: boolean;
    pausable: boolean;
    governanceEnabled: boolean;
    autoLiquidityEnabled: boolean;
    antiWhaleEnabled: boolean;
    stakingEnabled: boolean;
    autoLiquidityBps: BigNumberish;
    autoLiquidityRouter: AddressLike;
    autoLiquidityPairToken: AddressLike;
    stakingManager: AddressLike;
    metadataURI: string;
    brandingURI: string;
    fees: ERC20Template.FeeSplitStruct[];
    initialDistribution: ERC20Template.InitRecipientStruct[];
    minters: AddressLike[];
    pausers: AddressLike[];
    burners: AddressLike[];
    bridgeOperators: AddressLike[];
    antiWhale: ERC20Template.AntiWhaleConfigStruct;
  };

  export type TokenConfigStructOutput = [
    initialSupply: bigint,
    cap: bigint,
    mintable: boolean,
    burnable: boolean,
    pausable: boolean,
    governanceEnabled: boolean,
    autoLiquidityEnabled: boolean,
    antiWhaleEnabled: boolean,
    stakingEnabled: boolean,
    autoLiquidityBps: bigint,
    autoLiquidityRouter: string,
    autoLiquidityPairToken: string,
    stakingManager: string,
    metadataURI: string,
    brandingURI: string,
    fees: ERC20Template.FeeSplitStructOutput[],
    initialDistribution: ERC20Template.InitRecipientStructOutput[],
    minters: string[],
    pausers: string[],
    burners: string[],
    bridgeOperators: string[],
    antiWhale: ERC20Template.AntiWhaleConfigStructOutput
  ] & {
    initialSupply: bigint;
    cap: bigint;
    mintable: boolean;
    burnable: boolean;
    pausable: boolean;
    governanceEnabled: boolean;
    autoLiquidityEnabled: boolean;
    antiWhaleEnabled: boolean;
    stakingEnabled: boolean;
    autoLiquidityBps: bigint;
    autoLiquidityRouter: string;
    autoLiquidityPairToken: string;
    stakingManager: string;
    metadataURI: string;
    brandingURI: string;
    fees: ERC20Template.FeeSplitStructOutput[];
    initialDistribution: ERC20Template.InitRecipientStructOutput[];
    minters: string[];
    pausers: string[];
    burners: string[];
    bridgeOperators: string[];
    antiWhale: ERC20Template.AntiWhaleConfigStructOutput;
  };
}

export interface TokenFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "TIER_ADVANCED"
      | "TIER_BASIC"
      | "TIER_DAO"
      | "TIER_PREMIUM"
      | "TIER_PRO"
      | "allTokens"
      | "createToken"
      | "feeRecipient"
      | "owner"
      | "renounceOwnership"
      | "setFeeRecipient"
      | "setTier"
      | "tierInfo"
      | "tokenRecords"
      | "totalTokens"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeRecipientUpdated"
      | "OwnershipTransferred"
      | "TierUpdated"
      | "TokenCreatedExtended"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "TIER_ADVANCED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIER_BASIC",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TIER_DAO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TIER_PREMIUM",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TIER_PRO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [
      BigNumberish,
      ERC20Template.TokenInitStruct,
      ERC20Template.TokenConfigStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTier",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tierInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRecords",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "TIER_ADVANCED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TIER_BASIC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TIER_DAO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TIER_PREMIUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TIER_PRO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tierInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace FeeRecipientUpdatedEvent {
  export type InputTuple = [newRecipient: AddressLike];
  export type OutputTuple = [newRecipient: string];
  export interface OutputObject {
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TierUpdatedEvent {
  export type InputTuple = [
    tierId: BigNumberish,
    price: BigNumberish,
    features: BigNumberish
  ];
  export type OutputTuple = [tierId: bigint, price: bigint, features: bigint];
  export interface OutputObject {
    tierId: bigint;
    price: bigint;
    features: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCreatedExtendedEvent {
  export type InputTuple = [
    token: AddressLike,
    creator: AddressLike,
    tierId: BigNumberish,
    name: string,
    symbol: string,
    configHash: BytesLike,
    metadataURI: string,
    brandingURI: string
  ];
  export type OutputTuple = [
    token: string,
    creator: string,
    tierId: bigint,
    name: string,
    symbol: string,
    configHash: string,
    metadataURI: string,
    brandingURI: string
  ];
  export interface OutputObject {
    token: string;
    creator: string;
    tierId: bigint;
    name: string;
    symbol: string;
    configHash: string;
    metadataURI: string;
    brandingURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenFactory extends BaseContract {
  connect(runner?: ContractRunner | null): TokenFactory;
  waitForDeployment(): Promise<this>;

  interface: TokenFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  TIER_ADVANCED: TypedContractMethod<[], [bigint], "view">;

  TIER_BASIC: TypedContractMethod<[], [bigint], "view">;

  TIER_DAO: TypedContractMethod<[], [bigint], "view">;

  TIER_PREMIUM: TypedContractMethod<[], [bigint], "view">;

  TIER_PRO: TypedContractMethod<[], [bigint], "view">;

  allTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createToken: TypedContractMethod<
    [
      tierId: BigNumberish,
      init: ERC20Template.TokenInitStruct,
      cfg: ERC20Template.TokenConfigStruct
    ],
    [string],
    "payable"
  >;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFeeRecipient: TypedContractMethod<
    [newRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setTier: TypedContractMethod<
    [tierId: BigNumberish, price: BigNumberish, features: BigNumberish],
    [void],
    "nonpayable"
  >;

  tierInfo: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { price: bigint; features: bigint }],
    "view"
  >;

  tokenRecords: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, string] & {
        creator: string;
        tierId: bigint;
        createdAt: bigint;
        configHash: string;
      }
    ],
    "view"
  >;

  totalTokens: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "TIER_ADVANCED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TIER_BASIC"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TIER_DAO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TIER_PREMIUM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TIER_PRO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createToken"
  ): TypedContractMethod<
    [
      tierId: BigNumberish,
      init: ERC20Template.TokenInitStruct,
      cfg: ERC20Template.TokenConfigStruct
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[newRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTier"
  ): TypedContractMethod<
    [tierId: BigNumberish, price: BigNumberish, features: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tierInfo"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { price: bigint; features: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenRecords"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, string] & {
        creator: string;
        tierId: bigint;
        createdAt: bigint;
        configHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FeeRecipientUpdated"
  ): TypedContractEvent<
    FeeRecipientUpdatedEvent.InputTuple,
    FeeRecipientUpdatedEvent.OutputTuple,
    FeeRecipientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TierUpdated"
  ): TypedContractEvent<
    TierUpdatedEvent.InputTuple,
    TierUpdatedEvent.OutputTuple,
    TierUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenCreatedExtended"
  ): TypedContractEvent<
    TokenCreatedExtendedEvent.InputTuple,
    TokenCreatedExtendedEvent.OutputTuple,
    TokenCreatedExtendedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "FeeRecipientUpdated(address)": TypedContractEvent<
      FeeRecipientUpdatedEvent.InputTuple,
      FeeRecipientUpdatedEvent.OutputTuple,
      FeeRecipientUpdatedEvent.OutputObject
    >;
    FeeRecipientUpdated: TypedContractEvent<
      FeeRecipientUpdatedEvent.InputTuple,
      FeeRecipientUpdatedEvent.OutputTuple,
      FeeRecipientUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TierUpdated(uint8,uint256,uint256)": TypedContractEvent<
      TierUpdatedEvent.InputTuple,
      TierUpdatedEvent.OutputTuple,
      TierUpdatedEvent.OutputObject
    >;
    TierUpdated: TypedContractEvent<
      TierUpdatedEvent.InputTuple,
      TierUpdatedEvent.OutputTuple,
      TierUpdatedEvent.OutputObject
    >;

    "TokenCreatedExtended(address,address,uint8,string,string,bytes32,string,string)": TypedContractEvent<
      TokenCreatedExtendedEvent.InputTuple,
      TokenCreatedExtendedEvent.OutputTuple,
      TokenCreatedExtendedEvent.OutputObject
    >;
    TokenCreatedExtended: TypedContractEvent<
      TokenCreatedExtendedEvent.InputTuple,
      TokenCreatedExtendedEvent.OutputTuple,
      TokenCreatedExtendedEvent.OutputObject
    >;

    "Withdraw(address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
