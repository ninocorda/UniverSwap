/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TokenVesting {
  export type VestingRequestStruct = {
    beneficiary: AddressLike;
    amount: BigNumberish;
    releaseTime: BigNumberish;
  };

  export type VestingRequestStructOutput = [
    beneficiary: string,
    amount: bigint,
    releaseTime: bigint
  ] & { beneficiary: string; amount: bigint; releaseTime: bigint };
}

export interface TokenVestingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createVestingBatch"
      | "getVestingsByBeneficiary"
      | "getVestingsByFunder"
      | "pendingAmount"
      | "release"
      | "releaseMany"
      | "vestingCount"
      | "vestings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "VestingCreated" | "VestingReleased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createVestingBatch",
    values: [AddressLike, TokenVesting.VestingRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingsByBeneficiary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingsByFunder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseMany",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestings",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createVestingBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingsByBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingsByFunder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseMany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vestings", data: BytesLike): Result;
}

export namespace VestingCreatedEvent {
  export type InputTuple = [
    vestingId: BigNumberish,
    token: AddressLike,
    beneficiary: AddressLike,
    funder: AddressLike,
    amount: BigNumberish,
    releaseTime: BigNumberish
  ];
  export type OutputTuple = [
    vestingId: bigint,
    token: string,
    beneficiary: string,
    funder: string,
    amount: bigint,
    releaseTime: bigint
  ];
  export interface OutputObject {
    vestingId: bigint;
    token: string;
    beneficiary: string;
    funder: string;
    amount: bigint;
    releaseTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingReleasedEvent {
  export type InputTuple = [
    vestingId: BigNumberish,
    token: AddressLike,
    beneficiary: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    vestingId: bigint,
    token: string,
    beneficiary: string,
    amount: bigint
  ];
  export interface OutputObject {
    vestingId: bigint;
    token: string;
    beneficiary: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenVesting extends BaseContract {
  connect(runner?: ContractRunner | null): TokenVesting;
  waitForDeployment(): Promise<this>;

  interface: TokenVestingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createVestingBatch: TypedContractMethod<
    [token: AddressLike, requests: TokenVesting.VestingRequestStruct[]],
    [[bigint, bigint] & { firstId: bigint; count: bigint }],
    "nonpayable"
  >;

  getVestingsByBeneficiary: TypedContractMethod<
    [beneficiary: AddressLike],
    [bigint[]],
    "view"
  >;

  getVestingsByFunder: TypedContractMethod<
    [funder: AddressLike],
    [bigint[]],
    "view"
  >;

  pendingAmount: TypedContractMethod<
    [vestingId: BigNumberish],
    [bigint],
    "view"
  >;

  release: TypedContractMethod<[vestingId: BigNumberish], [void], "nonpayable">;

  releaseMany: TypedContractMethod<
    [vestingIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  vestingCount: TypedContractMethod<[], [bigint], "view">;

  vestings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint] & {
        token: string;
        funder: string;
        beneficiary: string;
        amount: bigint;
        released: bigint;
        releaseTime: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createVestingBatch"
  ): TypedContractMethod<
    [token: AddressLike, requests: TokenVesting.VestingRequestStruct[]],
    [[bigint, bigint] & { firstId: bigint; count: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getVestingsByBeneficiary"
  ): TypedContractMethod<[beneficiary: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getVestingsByFunder"
  ): TypedContractMethod<[funder: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "pendingAmount"
  ): TypedContractMethod<[vestingId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "release"
  ): TypedContractMethod<[vestingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "releaseMany"
  ): TypedContractMethod<[vestingIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vestingCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vestings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint] & {
        token: string;
        funder: string;
        beneficiary: string;
        amount: bigint;
        released: bigint;
        releaseTime: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "VestingCreated"
  ): TypedContractEvent<
    VestingCreatedEvent.InputTuple,
    VestingCreatedEvent.OutputTuple,
    VestingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VestingReleased"
  ): TypedContractEvent<
    VestingReleasedEvent.InputTuple,
    VestingReleasedEvent.OutputTuple,
    VestingReleasedEvent.OutputObject
  >;

  filters: {
    "VestingCreated(uint256,address,address,address,uint256,uint64)": TypedContractEvent<
      VestingCreatedEvent.InputTuple,
      VestingCreatedEvent.OutputTuple,
      VestingCreatedEvent.OutputObject
    >;
    VestingCreated: TypedContractEvent<
      VestingCreatedEvent.InputTuple,
      VestingCreatedEvent.OutputTuple,
      VestingCreatedEvent.OutputObject
    >;

    "VestingReleased(uint256,address,address,uint256)": TypedContractEvent<
      VestingReleasedEvent.InputTuple,
      VestingReleasedEvent.OutputTuple,
      VestingReleasedEvent.OutputObject
    >;
    VestingReleased: TypedContractEvent<
      VestingReleasedEvent.InputTuple,
      VestingReleasedEvent.OutputTuple,
      VestingReleasedEvent.OutputObject
    >;
  };
}
