/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ERC20Template {
  export type AntiWhaleConfigStruct = {
    enabled: boolean;
    maxTxAmount: BigNumberish;
    maxWalletAmount: BigNumberish;
    cooldownBlocks: BigNumberish;
  };

  export type AntiWhaleConfigStructOutput = [
    enabled: boolean,
    maxTxAmount: bigint,
    maxWalletAmount: bigint,
    cooldownBlocks: bigint
  ] & {
    enabled: boolean;
    maxTxAmount: bigint;
    maxWalletAmount: bigint;
    cooldownBlocks: bigint;
  };

  export type FeeSplitStruct = {
    feeType: BigNumberish;
    bps: BigNumberish;
    recipient: AddressLike;
  };

  export type FeeSplitStructOutput = [
    feeType: bigint,
    bps: bigint,
    recipient: string
  ] & { feeType: bigint; bps: bigint; recipient: string };

  export type VestingScheduleStruct = {
    amount: BigNumberish;
    released: BigNumberish;
    start: BigNumberish;
    cliff: BigNumberish;
    duration: BigNumberish;
    revocable: boolean;
    revoked: boolean;
  };

  export type VestingScheduleStructOutput = [
    amount: bigint,
    released: bigint,
    start: bigint,
    cliff: bigint,
    duration: bigint,
    revocable: boolean,
    revoked: boolean
  ] & {
    amount: bigint;
    released: bigint;
    start: bigint;
    cliff: bigint;
    duration: bigint;
    revocable: boolean;
    revoked: boolean;
  };

  export type TokenInitStruct = {
    name: string;
    symbol: string;
    decimals: BigNumberish;
    owner: AddressLike;
    tierId: BigNumberish;
    templateVersion: BigNumberish;
  };

  export type TokenInitStructOutput = [
    name: string,
    symbol: string,
    decimals: bigint,
    owner: string,
    tierId: bigint,
    templateVersion: bigint
  ] & {
    name: string;
    symbol: string;
    decimals: bigint;
    owner: string;
    tierId: bigint;
    templateVersion: bigint;
  };

  export type InitRecipientStruct = {
    account: AddressLike;
    amount: BigNumberish;
    vesting: boolean;
    vestingStart: BigNumberish;
    cliff: BigNumberish;
    duration: BigNumberish;
    revocable: boolean;
  };

  export type InitRecipientStructOutput = [
    account: string,
    amount: bigint,
    vesting: boolean,
    vestingStart: bigint,
    cliff: bigint,
    duration: bigint,
    revocable: boolean
  ] & {
    account: string;
    amount: bigint;
    vesting: boolean;
    vestingStart: bigint;
    cliff: bigint;
    duration: bigint;
    revocable: boolean;
  };

  export type TokenConfigStruct = {
    initialSupply: BigNumberish;
    cap: BigNumberish;
    mintable: boolean;
    burnable: boolean;
    pausable: boolean;
    governanceEnabled: boolean;
    autoLiquidityEnabled: boolean;
    antiWhaleEnabled: boolean;
    stakingEnabled: boolean;
    autoLiquidityBps: BigNumberish;
    autoLiquidityRouter: AddressLike;
    autoLiquidityPairToken: AddressLike;
    stakingManager: AddressLike;
    metadataURI: string;
    brandingURI: string;
    fees: ERC20Template.FeeSplitStruct[];
    initialDistribution: ERC20Template.InitRecipientStruct[];
    minters: AddressLike[];
    pausers: AddressLike[];
    burners: AddressLike[];
    bridgeOperators: AddressLike[];
    antiWhale: ERC20Template.AntiWhaleConfigStruct;
  };

  export type TokenConfigStructOutput = [
    initialSupply: bigint,
    cap: bigint,
    mintable: boolean,
    burnable: boolean,
    pausable: boolean,
    governanceEnabled: boolean,
    autoLiquidityEnabled: boolean,
    antiWhaleEnabled: boolean,
    stakingEnabled: boolean,
    autoLiquidityBps: bigint,
    autoLiquidityRouter: string,
    autoLiquidityPairToken: string,
    stakingManager: string,
    metadataURI: string,
    brandingURI: string,
    fees: ERC20Template.FeeSplitStructOutput[],
    initialDistribution: ERC20Template.InitRecipientStructOutput[],
    minters: string[],
    pausers: string[],
    burners: string[],
    bridgeOperators: string[],
    antiWhale: ERC20Template.AntiWhaleConfigStructOutput
  ] & {
    initialSupply: bigint;
    cap: bigint;
    mintable: boolean;
    burnable: boolean;
    pausable: boolean;
    governanceEnabled: boolean;
    autoLiquidityEnabled: boolean;
    antiWhaleEnabled: boolean;
    stakingEnabled: boolean;
    autoLiquidityBps: bigint;
    autoLiquidityRouter: string;
    autoLiquidityPairToken: string;
    stakingManager: string;
    metadataURI: string;
    brandingURI: string;
    fees: ERC20Template.FeeSplitStructOutput[];
    initialDistribution: ERC20Template.InitRecipientStructOutput[];
    minters: string[];
    pausers: string[];
    burners: string[];
    bridgeOperators: string[];
    antiWhale: ERC20Template.AntiWhaleConfigStructOutput;
  };
}

export declare namespace Checkpoints {
  export type Checkpoint208Struct = {
    _key: BigNumberish;
    _value: BigNumberish;
  };

  export type Checkpoint208StructOutput = [_key: bigint, _value: bigint] & {
    _key: bigint;
    _value: bigint;
  };
}

export interface ERC20TemplateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ANTIWHALE_EXEMPT_ROLE"
      | "BPS_DENOMINATOR"
      | "BRIDGE_ROLE"
      | "BURNER_ROLE"
      | "CLOCK_MODE"
      | "CURRENT_TEMPLATE_VERSION"
      | "DEFAULT_ADMIN_ROLE"
      | "FEE_MANAGER_ROLE"
      | "LIQUIDITY_ROLE"
      | "MAX_AUTO_LIQUIDITY_BPS"
      | "MAX_FEE_BPS"
      | "MINTER_ROLE"
      | "PAUSER_ROLE"
      | "allowance"
      | "antiWhaleEnabled"
      | "approve"
      | "autoLiquidityEnabled"
      | "balanceOf"
      | "brandingURI"
      | "bridgeBurn"
      | "bridgeMint"
      | "burn"
      | "burnFrom"
      | "burnable"
      | "cap"
      | "checkpoints"
      | "clock"
      | "decimals"
      | "delegate"
      | "delegateBySig"
      | "delegates"
      | "depositToStaking"
      | "eip712Domain"
      | "getAntiWhale"
      | "getFeeSplits"
      | "getPastTotalSupply"
      | "getPastVotes"
      | "getRoleAdmin"
      | "getVotes"
      | "governanceEnabled"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "liquidityAccumulator"
      | "liquidityBps"
      | "liquidityPairToken"
      | "liquidityRouter"
      | "metadataURI"
      | "mint"
      | "mintable"
      | "name"
      | "nonces"
      | "numCheckpoints"
      | "pausableEnabled"
      | "pause"
      | "paused"
      | "releasableAmount"
      | "releaseVested"
      | "renounceAllRoles"
      | "renounceRole"
      | "revokeRole"
      | "revokeVesting"
      | "setMetadata"
      | "stakingEnabled"
      | "stakingManager"
      | "stakingReserve"
      | "supportsInterface"
      | "symbol"
      | "templateVersion"
      | "templateVersionConstant"
      | "tierId"
      | "totalFeeBps"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "unpause"
      | "updateAntiWhale"
      | "updateFees"
      | "updateLiquidityConfig"
      | "versionedInfo"
      | "vestingCount"
      | "withdrawLiquidityReserve"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AntiWhaleUpdated"
      | "Approval"
      | "DelegateChanged"
      | "DelegateVotesChanged"
      | "EIP712DomainChanged"
      | "FeesUpdated"
      | "Initialized"
      | "LiquidityReserveUpdated"
      | "MetadataUpdated"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Transfer"
      | "Unpaused"
      | "VestingCreated"
      | "VestingReleased"
      | "VestingRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ANTIWHALE_EXEMPT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BPS_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BRIDGE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BURNER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLOCK_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CURRENT_TEMPLATE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDITY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_AUTO_LIQUIDITY_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "antiWhaleEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "autoLiquidityEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "brandingURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeBurn",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeMint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "burnable", values?: undefined): string;
  encodeFunctionData(functionFragment: "cap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkpoints",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "clock", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToStaking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAntiWhale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeSplits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPastTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastVotes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [ERC20Template.TokenInitStruct, ERC20Template.TokenConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityAccumulator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPairToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metadataURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mintable", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "numCheckpoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pausableEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releasableAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseVested",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAllRoles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeVesting",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadata",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "templateVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "templateVersionConstant",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tierId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAntiWhale",
    values: [ERC20Template.AntiWhaleConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFees",
    values: [ERC20Template.FeeSplitStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiquidityConfig",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "versionedInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidityReserve",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ANTIWHALE_EXEMPT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BPS_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BRIDGE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BURNER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CLOCK_MODE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CURRENT_TEMPLATE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDITY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_AUTO_LIQUIDITY_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "antiWhaleEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "autoLiquidityEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "brandingURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridgeBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgeMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAntiWhale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeSplits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityAccumulator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPairToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pausableEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releasableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseVested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAllRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "templateVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "templateVersionConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tierId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAntiWhale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidityConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionedInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidityReserve",
    data: BytesLike
  ): Result;
}

export namespace AntiWhaleUpdatedEvent {
  export type InputTuple = [cfg: ERC20Template.AntiWhaleConfigStruct];
  export type OutputTuple = [cfg: ERC20Template.AntiWhaleConfigStructOutput];
  export interface OutputObject {
    cfg: ERC20Template.AntiWhaleConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateChangedEvent {
  export type InputTuple = [
    delegator: AddressLike,
    fromDelegate: AddressLike,
    toDelegate: AddressLike
  ];
  export type OutputTuple = [
    delegator: string,
    fromDelegate: string,
    toDelegate: string
  ];
  export interface OutputObject {
    delegator: string;
    fromDelegate: string;
    toDelegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateVotesChangedEvent {
  export type InputTuple = [
    delegate: AddressLike,
    previousVotes: BigNumberish,
    newVotes: BigNumberish
  ];
  export type OutputTuple = [
    delegate: string,
    previousVotes: bigint,
    newVotes: bigint
  ];
  export interface OutputObject {
    delegate: string;
    previousVotes: bigint;
    newVotes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesUpdatedEvent {
  export type InputTuple = [
    fees: ERC20Template.FeeSplitStruct[],
    totalFeeBps: BigNumberish
  ];
  export type OutputTuple = [
    fees: ERC20Template.FeeSplitStructOutput[],
    totalFeeBps: bigint
  ];
  export interface OutputObject {
    fees: ERC20Template.FeeSplitStructOutput[];
    totalFeeBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityReserveUpdatedEvent {
  export type InputTuple = [
    newReserve: BigNumberish,
    router: AddressLike,
    pairToken: AddressLike
  ];
  export type OutputTuple = [
    newReserve: bigint,
    router: string,
    pairToken: string
  ];
  export interface OutputObject {
    newReserve: bigint;
    router: string;
    pairToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdatedEvent {
  export type InputTuple = [newMetadata: string, newBranding: string];
  export type OutputTuple = [newMetadata: string, newBranding: string];
  export interface OutputObject {
    newMetadata: string;
    newBranding: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingCreatedEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    index: BigNumberish,
    schedule: ERC20Template.VestingScheduleStruct
  ];
  export type OutputTuple = [
    beneficiary: string,
    index: bigint,
    schedule: ERC20Template.VestingScheduleStructOutput
  ];
  export interface OutputObject {
    beneficiary: string;
    index: bigint;
    schedule: ERC20Template.VestingScheduleStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingReleasedEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    index: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    index: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    index: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingRevokedEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    index: BigNumberish,
    refund: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    index: bigint,
    refund: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    index: bigint;
    refund: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC20Template extends BaseContract {
  connect(runner?: ContractRunner | null): ERC20Template;
  waitForDeployment(): Promise<this>;

  interface: ERC20TemplateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ANTIWHALE_EXEMPT_ROLE: TypedContractMethod<[], [string], "view">;

  BPS_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  BRIDGE_ROLE: TypedContractMethod<[], [string], "view">;

  BURNER_ROLE: TypedContractMethod<[], [string], "view">;

  CLOCK_MODE: TypedContractMethod<[], [string], "view">;

  CURRENT_TEMPLATE_VERSION: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  FEE_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  LIQUIDITY_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_AUTO_LIQUIDITY_BPS: TypedContractMethod<[], [bigint], "view">;

  MAX_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  MINTER_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  antiWhaleEnabled: TypedContractMethod<[], [boolean], "view">;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  autoLiquidityEnabled: TypedContractMethod<[], [boolean], "view">;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  brandingURI: TypedContractMethod<[], [string], "view">;

  bridgeBurn: TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  bridgeMint: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  burn: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  burnFrom: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  burnable: TypedContractMethod<[], [boolean], "view">;

  cap: TypedContractMethod<[], [bigint], "view">;

  checkpoints: TypedContractMethod<
    [account: AddressLike, pos: BigNumberish],
    [Checkpoints.Checkpoint208StructOutput],
    "view"
  >;

  clock: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  delegate: TypedContractMethod<[delegatee: AddressLike], [void], "nonpayable">;

  delegateBySig: TypedContractMethod<
    [
      delegatee: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  delegates: TypedContractMethod<[account: AddressLike], [string], "view">;

  depositToStaking: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  getAntiWhale: TypedContractMethod<
    [],
    [ERC20Template.AntiWhaleConfigStructOutput],
    "view"
  >;

  getFeeSplits: TypedContractMethod<
    [],
    [ERC20Template.FeeSplitStructOutput[]],
    "view"
  >;

  getPastTotalSupply: TypedContractMethod<
    [timepoint: BigNumberish],
    [bigint],
    "view"
  >;

  getPastVotes: TypedContractMethod<
    [account: AddressLike, timepoint: BigNumberish],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getVotes: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  governanceEnabled: TypedContractMethod<[], [boolean], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      init_: ERC20Template.TokenInitStruct,
      cfg_: ERC20Template.TokenConfigStruct
    ],
    [void],
    "nonpayable"
  >;

  liquidityAccumulator: TypedContractMethod<[], [bigint], "view">;

  liquidityBps: TypedContractMethod<[], [bigint], "view">;

  liquidityPairToken: TypedContractMethod<[], [string], "view">;

  liquidityRouter: TypedContractMethod<[], [string], "view">;

  metadataURI: TypedContractMethod<[], [string], "view">;

  mint: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintable: TypedContractMethod<[], [boolean], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  numCheckpoints: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  pausableEnabled: TypedContractMethod<[], [boolean], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  releasableAmount: TypedContractMethod<
    [beneficiary: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  releaseVested: TypedContractMethod<
    [beneficiary: AddressLike, index: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceAllRoles: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeVesting: TypedContractMethod<
    [beneficiary: AddressLike, index: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMetadata: TypedContractMethod<
    [metadata: string, branding: string],
    [void],
    "nonpayable"
  >;

  stakingEnabled: TypedContractMethod<[], [boolean], "view">;

  stakingManager: TypedContractMethod<[], [string], "view">;

  stakingReserve: TypedContractMethod<[], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  templateVersion: TypedContractMethod<[], [bigint], "view">;

  templateVersionConstant: TypedContractMethod<[], [bigint], "view">;

  tierId: TypedContractMethod<[], [bigint], "view">;

  totalFeeBps: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateAntiWhale: TypedContractMethod<
    [cfg: ERC20Template.AntiWhaleConfigStruct],
    [void],
    "nonpayable"
  >;

  updateFees: TypedContractMethod<
    [fees: ERC20Template.FeeSplitStruct[]],
    [void],
    "nonpayable"
  >;

  updateLiquidityConfig: TypedContractMethod<
    [router: AddressLike, pairToken: AddressLike, bps: BigNumberish],
    [void],
    "nonpayable"
  >;

  versionedInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean, boolean, boolean, boolean] & {
        version: bigint;
        tier: bigint;
        governance: boolean;
        liquidity: boolean;
        antiWhale: boolean;
        staking: boolean;
      }
    ],
    "view"
  >;

  vestingCount: TypedContractMethod<
    [beneficiary: AddressLike],
    [bigint],
    "view"
  >;

  withdrawLiquidityReserve: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ANTIWHALE_EXEMPT_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BPS_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BRIDGE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BURNER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CLOCK_MODE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CURRENT_TEMPLATE_VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEE_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LIQUIDITY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_AUTO_LIQUIDITY_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "antiWhaleEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "autoLiquidityEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "brandingURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bridgeBurn"
  ): TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bridgeMint"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnFrom"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burnable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "cap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkpoints"
  ): TypedContractMethod<
    [account: AddressLike, pos: BigNumberish],
    [Checkpoints.Checkpoint208StructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "clock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<[delegatee: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegateBySig"
  ): TypedContractMethod<
    [
      delegatee: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegates"
  ): TypedContractMethod<[account: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "depositToStaking"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAntiWhale"
  ): TypedContractMethod<
    [],
    [ERC20Template.AntiWhaleConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeeSplits"
  ): TypedContractMethod<[], [ERC20Template.FeeSplitStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPastTotalSupply"
  ): TypedContractMethod<[timepoint: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPastVotes"
  ): TypedContractMethod<
    [account: AddressLike, timepoint: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getVotes"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "governanceEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      init_: ERC20Template.TokenInitStruct,
      cfg_: ERC20Template.TokenConfigStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidityAccumulator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidityBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidityPairToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "liquidityRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "metadataURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "numCheckpoints"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pausableEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "releasableAmount"
  ): TypedContractMethod<
    [beneficiary: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "releaseVested"
  ): TypedContractMethod<
    [beneficiary: AddressLike, index: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceAllRoles"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeVesting"
  ): TypedContractMethod<
    [beneficiary: AddressLike, index: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMetadata"
  ): TypedContractMethod<
    [metadata: string, branding: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakingEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "stakingManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stakingReserve"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "templateVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "templateVersionConstant"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tierId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAntiWhale"
  ): TypedContractMethod<
    [cfg: ERC20Template.AntiWhaleConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFees"
  ): TypedContractMethod<
    [fees: ERC20Template.FeeSplitStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateLiquidityConfig"
  ): TypedContractMethod<
    [router: AddressLike, pairToken: AddressLike, bps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "versionedInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean, boolean, boolean, boolean] & {
        version: bigint;
        tier: bigint;
        governance: boolean;
        liquidity: boolean;
        antiWhale: boolean;
        staking: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "vestingCount"
  ): TypedContractMethod<[beneficiary: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawLiquidityReserve"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AntiWhaleUpdated"
  ): TypedContractEvent<
    AntiWhaleUpdatedEvent.InputTuple,
    AntiWhaleUpdatedEvent.OutputTuple,
    AntiWhaleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "DelegateChanged"
  ): TypedContractEvent<
    DelegateChangedEvent.InputTuple,
    DelegateChangedEvent.OutputTuple,
    DelegateChangedEvent.OutputObject
  >;
  getEvent(
    key: "DelegateVotesChanged"
  ): TypedContractEvent<
    DelegateVotesChangedEvent.InputTuple,
    DelegateVotesChangedEvent.OutputTuple,
    DelegateVotesChangedEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "FeesUpdated"
  ): TypedContractEvent<
    FeesUpdatedEvent.InputTuple,
    FeesUpdatedEvent.OutputTuple,
    FeesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityReserveUpdated"
  ): TypedContractEvent<
    LiquidityReserveUpdatedEvent.InputTuple,
    LiquidityReserveUpdatedEvent.OutputTuple,
    LiquidityReserveUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdated"
  ): TypedContractEvent<
    MetadataUpdatedEvent.InputTuple,
    MetadataUpdatedEvent.OutputTuple,
    MetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VestingCreated"
  ): TypedContractEvent<
    VestingCreatedEvent.InputTuple,
    VestingCreatedEvent.OutputTuple,
    VestingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VestingReleased"
  ): TypedContractEvent<
    VestingReleasedEvent.InputTuple,
    VestingReleasedEvent.OutputTuple,
    VestingReleasedEvent.OutputObject
  >;
  getEvent(
    key: "VestingRevoked"
  ): TypedContractEvent<
    VestingRevokedEvent.InputTuple,
    VestingRevokedEvent.OutputTuple,
    VestingRevokedEvent.OutputObject
  >;

  filters: {
    "AntiWhaleUpdated(tuple)": TypedContractEvent<
      AntiWhaleUpdatedEvent.InputTuple,
      AntiWhaleUpdatedEvent.OutputTuple,
      AntiWhaleUpdatedEvent.OutputObject
    >;
    AntiWhaleUpdated: TypedContractEvent<
      AntiWhaleUpdatedEvent.InputTuple,
      AntiWhaleUpdatedEvent.OutputTuple,
      AntiWhaleUpdatedEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "DelegateChanged(address,address,address)": TypedContractEvent<
      DelegateChangedEvent.InputTuple,
      DelegateChangedEvent.OutputTuple,
      DelegateChangedEvent.OutputObject
    >;
    DelegateChanged: TypedContractEvent<
      DelegateChangedEvent.InputTuple,
      DelegateChangedEvent.OutputTuple,
      DelegateChangedEvent.OutputObject
    >;

    "DelegateVotesChanged(address,uint256,uint256)": TypedContractEvent<
      DelegateVotesChangedEvent.InputTuple,
      DelegateVotesChangedEvent.OutputTuple,
      DelegateVotesChangedEvent.OutputObject
    >;
    DelegateVotesChanged: TypedContractEvent<
      DelegateVotesChangedEvent.InputTuple,
      DelegateVotesChangedEvent.OutputTuple,
      DelegateVotesChangedEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "FeesUpdated(tuple[],uint16)": TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;
    FeesUpdated: TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LiquidityReserveUpdated(uint256,address,address)": TypedContractEvent<
      LiquidityReserveUpdatedEvent.InputTuple,
      LiquidityReserveUpdatedEvent.OutputTuple,
      LiquidityReserveUpdatedEvent.OutputObject
    >;
    LiquidityReserveUpdated: TypedContractEvent<
      LiquidityReserveUpdatedEvent.InputTuple,
      LiquidityReserveUpdatedEvent.OutputTuple,
      LiquidityReserveUpdatedEvent.OutputObject
    >;

    "MetadataUpdated(string,string)": TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;
    MetadataUpdated: TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VestingCreated(address,uint256,tuple)": TypedContractEvent<
      VestingCreatedEvent.InputTuple,
      VestingCreatedEvent.OutputTuple,
      VestingCreatedEvent.OutputObject
    >;
    VestingCreated: TypedContractEvent<
      VestingCreatedEvent.InputTuple,
      VestingCreatedEvent.OutputTuple,
      VestingCreatedEvent.OutputObject
    >;

    "VestingReleased(address,uint256,uint256)": TypedContractEvent<
      VestingReleasedEvent.InputTuple,
      VestingReleasedEvent.OutputTuple,
      VestingReleasedEvent.OutputObject
    >;
    VestingReleased: TypedContractEvent<
      VestingReleasedEvent.InputTuple,
      VestingReleasedEvent.OutputTuple,
      VestingReleasedEvent.OutputObject
    >;

    "VestingRevoked(address,uint256,uint256)": TypedContractEvent<
      VestingRevokedEvent.InputTuple,
      VestingRevokedEvent.OutputTuple,
      VestingRevokedEvent.OutputObject
    >;
    VestingRevoked: TypedContractEvent<
      VestingRevokedEvent.InputTuple,
      VestingRevokedEvent.OutputTuple,
      VestingRevokedEvent.OutputObject
    >;
  };
}
