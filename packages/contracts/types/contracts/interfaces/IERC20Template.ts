/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IERC20Template {
  export type TokenInitStruct = {
    name: string;
    symbol: string;
    decimals: BigNumberish;
    owner: AddressLike;
    tierId: BigNumberish;
    templateVersion: BigNumberish;
  };

  export type TokenInitStructOutput = [
    name: string,
    symbol: string,
    decimals: bigint,
    owner: string,
    tierId: bigint,
    templateVersion: bigint
  ] & {
    name: string;
    symbol: string;
    decimals: bigint;
    owner: string;
    tierId: bigint;
    templateVersion: bigint;
  };

  export type FeeSplitStruct = {
    feeType: BigNumberish;
    bps: BigNumberish;
    recipient: AddressLike;
  };

  export type FeeSplitStructOutput = [
    feeType: bigint,
    bps: bigint,
    recipient: string
  ] & { feeType: bigint; bps: bigint; recipient: string };

  export type InitRecipientStruct = {
    account: AddressLike;
    amount: BigNumberish;
    vesting: boolean;
    vestingStart: BigNumberish;
    cliff: BigNumberish;
    duration: BigNumberish;
    revocable: boolean;
  };

  export type InitRecipientStructOutput = [
    account: string,
    amount: bigint,
    vesting: boolean,
    vestingStart: bigint,
    cliff: bigint,
    duration: bigint,
    revocable: boolean
  ] & {
    account: string;
    amount: bigint;
    vesting: boolean;
    vestingStart: bigint;
    cliff: bigint;
    duration: bigint;
    revocable: boolean;
  };

  export type AntiWhaleConfigStruct = {
    enabled: boolean;
    maxTxAmount: BigNumberish;
    maxWalletAmount: BigNumberish;
    cooldownBlocks: BigNumberish;
  };

  export type AntiWhaleConfigStructOutput = [
    enabled: boolean,
    maxTxAmount: bigint,
    maxWalletAmount: bigint,
    cooldownBlocks: bigint
  ] & {
    enabled: boolean;
    maxTxAmount: bigint;
    maxWalletAmount: bigint;
    cooldownBlocks: bigint;
  };

  export type TokenConfigStruct = {
    initialSupply: BigNumberish;
    cap: BigNumberish;
    mintable: boolean;
    burnable: boolean;
    pausable: boolean;
    governanceEnabled: boolean;
    autoLiquidityEnabled: boolean;
    antiWhaleEnabled: boolean;
    stakingEnabled: boolean;
    autoLiquidityBps: BigNumberish;
    autoLiquidityRouter: AddressLike;
    autoLiquidityPairToken: AddressLike;
    stakingManager: AddressLike;
    metadataURI: string;
    brandingURI: string;
    fees: IERC20Template.FeeSplitStruct[];
    initialDistribution: IERC20Template.InitRecipientStruct[];
    minters: AddressLike[];
    pausers: AddressLike[];
    burners: AddressLike[];
    bridgeOperators: AddressLike[];
    antiWhale: IERC20Template.AntiWhaleConfigStruct;
  };

  export type TokenConfigStructOutput = [
    initialSupply: bigint,
    cap: bigint,
    mintable: boolean,
    burnable: boolean,
    pausable: boolean,
    governanceEnabled: boolean,
    autoLiquidityEnabled: boolean,
    antiWhaleEnabled: boolean,
    stakingEnabled: boolean,
    autoLiquidityBps: bigint,
    autoLiquidityRouter: string,
    autoLiquidityPairToken: string,
    stakingManager: string,
    metadataURI: string,
    brandingURI: string,
    fees: IERC20Template.FeeSplitStructOutput[],
    initialDistribution: IERC20Template.InitRecipientStructOutput[],
    minters: string[],
    pausers: string[],
    burners: string[],
    bridgeOperators: string[],
    antiWhale: IERC20Template.AntiWhaleConfigStructOutput
  ] & {
    initialSupply: bigint;
    cap: bigint;
    mintable: boolean;
    burnable: boolean;
    pausable: boolean;
    governanceEnabled: boolean;
    autoLiquidityEnabled: boolean;
    antiWhaleEnabled: boolean;
    stakingEnabled: boolean;
    autoLiquidityBps: bigint;
    autoLiquidityRouter: string;
    autoLiquidityPairToken: string;
    stakingManager: string;
    metadataURI: string;
    brandingURI: string;
    fees: IERC20Template.FeeSplitStructOutput[];
    initialDistribution: IERC20Template.InitRecipientStructOutput[];
    minters: string[];
    pausers: string[];
    burners: string[];
    bridgeOperators: string[];
    antiWhale: IERC20Template.AntiWhaleConfigStructOutput;
  };
}

export interface IERC20TemplateInterface extends Interface {
  getFunction(nameOrSignature: "initialize"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "initialize",
    values: [IERC20Template.TokenInitStruct, IERC20Template.TokenConfigStruct]
  ): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
}

export interface IERC20Template extends BaseContract {
  connect(runner?: ContractRunner | null): IERC20Template;
  waitForDeployment(): Promise<this>;

  interface: IERC20TemplateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  initialize: TypedContractMethod<
    [
      init_: IERC20Template.TokenInitStruct,
      cfg_: IERC20Template.TokenConfigStruct
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      init_: IERC20Template.TokenInitStruct,
      cfg_: IERC20Template.TokenConfigStruct
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
