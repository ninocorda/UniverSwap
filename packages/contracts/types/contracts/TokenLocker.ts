/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TokenLockerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getLocksByOwner"
      | "lock"
      | "lockCount"
      | "locks"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "TokensLocked" | "TokensWithdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getLocksByOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lockCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "locks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getLocksByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace TokensLockedEvent {
  export type InputTuple = [
    lockId: BigNumberish,
    token: AddressLike,
    owner: AddressLike,
    amount: BigNumberish,
    unlockTime: BigNumberish
  ];
  export type OutputTuple = [
    lockId: bigint,
    token: string,
    owner: string,
    amount: bigint,
    unlockTime: bigint
  ];
  export interface OutputObject {
    lockId: bigint;
    token: string;
    owner: string;
    amount: bigint;
    unlockTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensWithdrawnEvent {
  export type InputTuple = [
    lockId: BigNumberish,
    token: AddressLike,
    owner: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    lockId: bigint,
    token: string,
    owner: string,
    amount: bigint
  ];
  export interface OutputObject {
    lockId: bigint;
    token: string;
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenLocker extends BaseContract {
  connect(runner?: ContractRunner | null): TokenLocker;
  waitForDeployment(): Promise<this>;

  interface: TokenLockerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getLocksByOwner: TypedContractMethod<
    [owner: AddressLike],
    [bigint[]],
    "view"
  >;

  lock: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, unlockTime: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  lockCount: TypedContractMethod<[], [bigint], "view">;

  locks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        token: string;
        owner: string;
        amount: bigint;
        unlockTime: bigint;
        withdrawn: boolean;
      }
    ],
    "view"
  >;

  withdraw: TypedContractMethod<[lockId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getLocksByOwner"
  ): TypedContractMethod<[owner: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "lock"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, unlockTime: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "locks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        token: string;
        owner: string;
        amount: bigint;
        unlockTime: bigint;
        withdrawn: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[lockId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "TokensLocked"
  ): TypedContractEvent<
    TokensLockedEvent.InputTuple,
    TokensLockedEvent.OutputTuple,
    TokensLockedEvent.OutputObject
  >;
  getEvent(
    key: "TokensWithdrawn"
  ): TypedContractEvent<
    TokensWithdrawnEvent.InputTuple,
    TokensWithdrawnEvent.OutputTuple,
    TokensWithdrawnEvent.OutputObject
  >;

  filters: {
    "TokensLocked(uint256,address,address,uint256,uint64)": TypedContractEvent<
      TokensLockedEvent.InputTuple,
      TokensLockedEvent.OutputTuple,
      TokensLockedEvent.OutputObject
    >;
    TokensLocked: TypedContractEvent<
      TokensLockedEvent.InputTuple,
      TokensLockedEvent.OutputTuple,
      TokensLockedEvent.OutputObject
    >;

    "TokensWithdrawn(uint256,address,address,uint256)": TypedContractEvent<
      TokensWithdrawnEvent.InputTuple,
      TokensWithdrawnEvent.OutputTuple,
      TokensWithdrawnEvent.OutputObject
    >;
    TokensWithdrawn: TypedContractEvent<
      TokensWithdrawnEvent.InputTuple,
      TokensWithdrawnEvent.OutputTuple,
      TokensWithdrawnEvent.OutputObject
    >;
  };
}
